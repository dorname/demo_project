{
    /**
     * The name of the package.
     */
    "name": "rs-ext-modern",

    "sencha": {
        /**
         * Alternate names for this package.
         *
         *    "alternateName": [],
         */

         /**
          * The namespace of this package.
          *
          * As a general rule, all classes that belong to this package should be under this namespace
          * if multiple namespaces are part of this package, set this to "".
          */
		 "namespace": "Rs.ext",

        /**
         * The package type.
         *
         * Sencha Cmd understands the following types of packages:
         *  - code : An arbitrary package of code for use by applications or other packages.
         *  - theme : A package to be used as an applicationâ€™s theme.
         *  - locale : A package containing localization strings or locale-specific code.
         *  - template : A package containing one or more templates.
         */
        "type": "code",

        /**
         * The toolkit used by this theme (only for "theme" package type).
         *
         * Themes can specify the toolkit they apply to ("classic" or "modern").
         *
         *    "toolkit": "classic",
         */

         /**
          * The author of the package.
          *
          * Required only if you are distributing this package through a Sencha Cmd repository,
          * in which case it should match the name you assign to your local package repository.
          */
        "creator": "zhouwenkun",

        /**
         * A summarized description of this package.
         */
        "summary": "Short summary",

        /**
         * A detailed description of this package.
         */
        "detailedDescription": "Long description of package",

        /**
         * The package version.
         *
         * Typically, changes to the package should come along with changes to the version.
         * This number should be in this format: d+(.d+)*
         */
        "version": "1.0.0",

        /**
         * The version that users can transparently update from without requiring code changes.
         *
         * In addition the version property, packages can also indicate the degree to which
         * they are backward compatible using the compatVersion property.
         */
        "compatVersion": "1.0.0",
		
		"architect": {
			"defsonly": true,
			"compatFrameworks": [
				"modern72"
			],
			"classes": [{
				"definition": "Telescope.Definition.js",
				"className": "Rs.ext.telescope.Telescope",
				"js": [
					"telescope/Telescope.js",
					"telescope/model/Base.js",
					"telescope/model/Criteria.js",
					"telescope/model/Detail.js",
					"telescope/model/Head.js",
					"telescope/model/Meta.js",
					"telescope/store/TeleMetaStore.js",
					"telescope/store/TeleStore.js",
					"telescope/view/TelescopeForm.js",
					"telescope/view/TelescopeGrid.js",
					"telescope/view/TelescopePanel.js"
				]
			},{
                "definition": "form/field/DateInputField.Definition.js",
                "className": "Rs.ext.form.field.DateInputField",
                "js": [
                    "form/field/DateInputField.js"
                ]
            }, {
                "definition": "form/field/TimeInputField.Definition.js",
                "className": "Rs.ext.form.field.TimeInputField",
                "js": [
                    "form/field/TimeInputField.js"
                ]
            } , {
                "definition": "grid/column/RsAction.Definition.js",
                "className": "Rs.ext.grid.column.RsAction",
                "js": [
                    "grid/column/RsAction.js"
                ]
            }, {
                "definition": "grid/column/ActionRestricted.Definition.js",
                "className": "Rs.ext.grid.column.ActionRestricted",
                "js": [
                    "grid/column/ActionRestricted.js"
                ]
            }, {
                "definition": "form/PagePanel.Definition.js",
                "className": "Rs.ext.form.PagePanel",
                "js": [
                    "form/PagePanel.js"
                ]
            },{
                "definition": "grid/plugin/GridDataCheckRepeatPlugin.Definition.js",
                "className": "Rs.ext.grid.plugin.GridDataCheckRepeatPlugin",
                "js": [
                    "grid/plugin/GridDataCheckRepeatPlugin.js"
                ]
            }, {
                "definition": "grid/plugin/GridDataMustInputPlugin.Definition.js",
                "className": "Rs.ext.grid.plugin.GridDataMustInputPlugin",
                "js": [
                    "grid/plugin/GridDataMustInputPlugin.js"
                ]
            }, {
                "definition": "grid/plugin/FieldsDifferentControlB.Definition.js",
                "className": "Rs.ext.grid.plugin.FieldsDifferentControlB",
                "js": [
                    "grid/plugin/FieldsDifferentControlB.js"
                ]
            }, {
                "definition": "grid/plugin/FieldSameControlB.Definition.js",
                "className": "Rs.ext.grid.plugin.FieldSameControlB",
                "js": [
                    "grid/plugin/FieldSameControlB.js"
                ]
            }, {
                "definition": "grid/plugin/FieldDiffentControlF.Definition.js",
                "className": "Rs.ext.grid.plugin.FieldDiffentControlF",
                "js": [
                    "grid/plugin/FieldDiffentControlF.js"
                ]
            }, {
                "definition": "grid/plugin/FieldSameControlF.Definition.js",
                "className": "Rs.ext.grid.plugin.FieldSameControlF",
                "js": [
                    "grid/plugin/FieldSameControlF.js"
                ]
            }, {
                "definition": "form/RsCheckBox.Defintion.js",
                "className": "Rs.ext.form.field.RsCheckBox",
                "js": [
                    "form/field/RsCheckBox.js"
                ]
            },{
                "definition": "grid/plugin/FieldsCompareControlF.Definition.js",
                "className": "Rs.ext.grid.plugin.FieldsCompareControlF",
                "js": [
                    "grid/plugin/FieldsCompareControlF.js"
                ]
            }, {
                "definition": "field/plugin/ControlStatusPlugin.Definition.js",
                "className": "Rs.ext.field.plugin.ControlStatusPlugin",
                "js": [
                    "field/plugin/ControlStatusPlugin.js"
                ]
            }, {
                "definition": "data/FrontCachedStore.Definition.js",
                "className": "Rs.ext.data.FrontCachedStore",
                "js": [
                    "data/FrontCachedStore.js"
                ]
            }, {
                "definition": "grid/RelationGridPanel.Definition.js",
                "className": "Rs.ext.grid.RelationGridPanel",
                "js": [
                    "grid/RelationGridPanel.js"
                ]
            }, {
                "definition": "grid/plugin/FieldsSumComparePlugin.Definition.js",
                "className": "Rs.ext.grid.plugin.FieldsSumComparePlugin",
                "js": [
                    "grid/plugin/FieldsSumComparePlugin.js"
                ]
            }, {
                "definition": "grid/plugin/CalculateAssign.Definition.js",
                "className": "Rs.ext.grid.plugin.CalculateAssign",
                "js": [
                    "grid/plugin/CalculateAssign.js"
                ]
            },  {
                "definition": "grid/plugin/StateControlF.Definition.js",
                "className": "Rs.ext.grid.plugin.StateControlF",
                "js": [
                    "grid/plugin/StateControlF.js"
                ]
            },{
                "definition": "grid/column/RsUpDownloadAction.Definition.js",
                "className": "Rs.ext.grid.column.RsUpDownloadAction",
                "js": [
                    "grid/column/RsUpDownloadAction.js"
                ]
            }, {
                "definition": "grid/plugin/FieldsHeadDetailCalculatePlugin.Definition.js",
                "className": "Rs.ext.grid.plugin.FieldsHeadDetailCalculatePlugin",
                "js": [
                    "grid/plugin/FieldsHeadDetailCalculatePlugin.js"
                ]
            }, {
                "definition": "grid/plugin/GridDeleteHeadControlF.Definition.js",
                "className": "Rs.ext.grid.plugin.deleteHeadControlF",
                "js": [
                    "grid/plugin/GridDeleteHeadControlF.js"
                ]
            }, {
                "definition": "grid/plugin/RelateStateControlF.Definition.js",
                "className": "Rs.ext.grid.plugin.RelateStateControlF",
                "js": [
                    "grid/plugin/RelateStateControlF.js"
                ]
            }, {
                "definition": "grid/plugin/SavePlugin.Definition.js",
                "className": "Rs.ext.panel.plugin.SavePlugin",
                "js": [
                    "grid/plugin/SavePlugin.js",
                    "button/RsButton.js"
                ]
            }, {
                "definition": "button/RsButton.Definition.js",
                "className": "Rs.ext.button.RsButton",
                "js": [
                    "button/RsButton.js"
                ]
            }
			
		]
		},

        /**
         * Spec. version of this package.json file.
         * This is set automatically by Sencha Cmd when first generating this file
         */
        "format": "1",

        /**
         * Additional resources used during theme slicing operations
         */
        "slicer": {
            "js": [
                {
                    "path": "${package.dir}/sass/example/custom.js",
                    "isWidgetManifest": true
                }
            ]
        },

        /**
         * Controls the output directory.
         */
        "output": "${package.dir}/build",

        /**
         * Indicates whether this is a locally developed package or downloaded form a repository.
         * Defaults to true on newly generated packages, should not be changed.
         */
        "local": true,

        /**
         * The theme (package) this package will use (e.g., "ext-theme-neptune", etc.).
         * This is only needed if the built package will be used by a non-Cmd application.
         *
         *     "theme": "ext-theme-classic",
         */

        /**
         * This is the comma-separated list of folders where classes reside. These
         * classes must be explicitly required to be included in the build.
         */
        "classpath": [
            "${package.dir}/src"
        ],

        /**
         * Comma-separated string with the paths of directories or files to search. Any classes
         * declared in these locations will be automatically required and included in the build.
         * If any file defines an Ext JS override (using Ext.define with an "override" property),
         * that override will in fact only be included in the build if the target class specified
         * in the "override" property is also included.
         */
        "overrides": [
            "${package.dir}/overrides"
        ],

        "example": {
            /**
             * One or more folders that contain example applications for this package.
             */
            "path": [
                "${package.dir}/examples"
            ]

            /**
             * You can list apps specifically.
             *
             *      "apps": [
             *          "demo1",
             *          "demo2"
             *      ]
             *
             * By default, all subfolders in the path are considered example applications.
             */
        },

		"builds": {
            "modern": {
                "toolkit": "modern",
                "theme": "theme-neptune"
            }
        },		   
        /**
         * The framework this package will use (i.e., "ext" or "touch").
         * This is only needed if the built package will be used by a non-Cmd application.
         *
         *     "framework": "ext",
         */
		"framework": "ext",

        /**
         * Packages can require other packages in the same way that applications can require
         * packages.
         *
         * Can be specified as an array of package names or configuration objects.
         *
         *      "requires": [
         *          "foo",
         *          "bar@1.1-2.0",
         *          {
         *              "name": "baz"
         *              "version": "1.5"
         *          }
         *      ]
         *
         * Can also be specified as an object:
         *
         *      "requires": {
         *          "foo": "2.2",
         *          "bar": {
         *              "minVersion": "1.1",
         *              "version": "2.0"
         *          }
         *      }
         */
        "requires": [],
		
		"language": {
			"js": {
			  "input": {
				"version": "ES5"
			  }
			}
		},
		"properties": {
			"skip.sass": 1,
			"skip.slice": 1
		}
    }
}
